#!/usr/bin/env python3
"""
API Manager for Advanced Web Reconnaissance Tool
Manages API keys and provides guided setup for external services
"""

import os
import getpass
import json
from pathlib import Path

class APIManager:
    """API key management and setup"""
    
    def __init__(self):
        self.config_file = Path("config.env")
        self.api_info = {
            'SHODAN_API_KEY': {
                'name': 'Shodan',
                'url': 'https://account.shodan.io/',
                'description': 'Search engine for Internet-connected devices',
                'features': ['Real IP discovery', 'Favicon hash search', 'Port scanning']
            },
            'VIRUSTOTAL_API_KEY': {
                'name': 'VirusTotal',
                'url': 'https://www.virustotal.com/gui/my-apikey',
                'description': 'Malware and URL analysis service',
                'features': ['Subdomain discovery', 'URL reputation', 'Passive DNS']
            },
            'SECURITYTRAILS_API_KEY': {
                'name': 'SecurityTrails',
                'url': 'https://securitytrails.com/corp/api',
                'description': 'DNS and infrastructure intelligence',
                'features': ['DNS history', 'Subdomain discovery', 'Certificate monitoring']
            },
            'CENSYS_API_ID': {
                'name': 'Censys (API ID)',
                'url': 'https://censys.io/api',
                'description': 'Internet scanning and certificate analysis',
                'features': ['Certificate analysis', 'IP discovery', 'Service detection']
            },
            'CENSYS_API_SECRET': {
                'name': 'Censys (API Secret)',
                'url': 'https://censys.io/api',
                'description': 'Internet scanning and certificate analysis',
                'features': ['Certificate analysis', 'IP discovery', 'Service detection']
            }
        }

    def load_existing_config(self):
        """Load existing configuration"""
        config = {}
        
        if self.config_file.exists():
            with open(self.config_file, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        config[key.strip()] = value.strip()
        
        return config

    def save_config(self, config):
        """Save configuration to file"""
        config_content = "# Advanced Recon Tool Configuration\n"
        config_content += "# Generated by API Manager\n\n"
        
        for key, info in self.api_info.items():
            config_content += f"# {info['name']} - {info['description']}\n"
            config_content += f"# Get your key from: {info['url']}\n"
            config_content += f"# Features: {', '.join(info['features'])}\n"
            
            value = config.get(key, '')
            config_content += f"{key}={value}\n\n"
        
        # Add tool configuration
        config_content += "# Tool Configuration\n"
        config_content += f"MAX_THREADS={config.get('MAX_THREADS', '50')}\n"
        config_content += f"REQUEST_TIMEOUT={config.get('REQUEST_TIMEOUT', '15')}\n"
        config_content += f"VERBOSE={config.get('VERBOSE', 'false')}\n"
        
        with open(self.config_file, 'w') as f:
            f.write(config_content)

    def interactive_setup(self):
        """Interactive API key setup"""
        print("üîë API Key Setup for Advanced Reconnaissance Tool")
        print("=" * 55)
        print("\nAPI keys are optional but unlock powerful features:")
        print("- Enhanced subdomain discovery")
        print("- Real IP address detection")
        print("- Historical DNS data")
        print("- Certificate analysis")
        print("- And much more!")
        
        config = self.load_existing_config()
        
        print("\nPress Enter to skip any API key you don't have")
        print("-" * 50)
        
        for key, info in self.api_info.items():
            current_value = config.get(key, '')
            
            print(f"\nüîó {info['name']}")
            print(f"   Description: {info['description']}")
            print(f"   Get your key: {info['url']}")
            print(f"   Features: {', '.join(info['features'])}")
            
            if current_value:
                masked_value = current_value[:8] + '*' * (len(current_value) - 8) if len(current_value) > 8 else '*' * len(current_value)
                print(f"   Current value: {masked_value}")
                
                keep = input(f"   Keep existing {info['name']} key? (Y/n): ").lower().strip()
                if keep in ['', 'y', 'yes']:
                    continue
            
            if 'secret' in key.lower():
                new_value = getpass.getpass(f"   Enter {info['name']} (hidden): ")
            else:
                new_value = input(f"   Enter {info['name']} key: ").strip()
            
            if new_value:
                config[key] = new_value
                print(f"   ‚úÖ {info['name']} key saved")
            else:
                print(f"   ‚è≠Ô∏è  {info['name']} key skipped")
        
        # Tool configuration
        print("\n‚öôÔ∏è  Tool Configuration")
        print("-" * 20)
        
        threads = input(f"Max threads (current: {config.get('MAX_THREADS', '50')}): ").strip()
        if threads:
            config['MAX_THREADS'] = threads
        
        timeout = input(f"Request timeout in seconds (current: {config.get('REQUEST_TIMEOUT', '15')}): ").strip()
        if timeout:
            config['REQUEST_TIMEOUT'] = timeout
        
        verbose = input(f"Verbose output (current: {config.get('VERBOSE', 'false')}): ").strip()
        if verbose:
            config['VERBOSE'] = verbose
        
        # Save configuration
        self.save_config(config)
        print(f"\n‚úÖ Configuration saved to: {self.config_file}")

    def show_status(self):
        """Show current API key status"""
        config = self.load_existing_config()
        
        print("üîë API Key Status")
        print("=" * 20)
        
        for key, info in self.api_info.items():
            value = config.get(key, '')
            status = "‚úÖ Configured" if value else "‚ùå Not set"
            
            print(f"{info['name']:<15} {status}")
            if value:
                masked = value[:4] + '*' * (len(value) - 4) if len(value) > 4 else '*' * len(value)
                print(f"                Value: {masked}")
        
        print(f"\nConfiguration file: {self.config_file}")

    def test_api_keys(self):
        """Test API key validity"""
        print("üß™ Testing API Keys")
        print("=" * 20)
        
        config = self.load_existing_config()
        
        # Test Shodan
        shodan_key = config.get('SHODAN_API_KEY')
        if shodan_key:
            if self.test_shodan_key(shodan_key):
                print("‚úÖ Shodan API key is valid")
            else:
                print("‚ùå Shodan API key is invalid")
        
        # Test VirusTotal
        vt_key = config.get('VIRUSTOTAL_API_KEY')
        if vt_key:
            if self.test_virustotal_key(vt_key):
                print("‚úÖ VirusTotal API key is valid")
            else:
                print("‚ùå VirusTotal API key is invalid")
        
        # Test SecurityTrails
        st_key = config.get('SECURITYTRAILS_API_KEY')
        if st_key:
            if self.test_securitytrails_key(st_key):
                print("‚úÖ SecurityTrails API key is valid")
            else:
                print("‚ùå SecurityTrails API key is invalid")

    def test_shodan_key(self, api_key):
        """Test Shodan API key"""
        try:
            import requests
            url = f"https://api.shodan.io/api-info?key={api_key}"
            response = requests.get(url, timeout=10)
            return response.status_code == 200
        except:
            return False

    def test_virustotal_key(self, api_key):
        """Test VirusTotal API key"""
        try:
            import requests
            url = "https://www.virustotal.com/vtapi/v2/domain/report"
            params = {'apikey': api_key, 'domain': 'google.com'}
            response = requests.get(url, params=params, timeout=10)
            return response.status_code == 200
        except:
            return False

    def test_securitytrails_key(self, api_key):
        """Test SecurityTrails API key"""
        try:
            import requests
            url = "https://api.securitytrails.com/v1/account/usage"
            headers = {'APIKEY': api_key}
            response = requests.get(url, headers=headers, timeout=10)
            return response.status_code == 200
        except:
            return False

def main():
    """Main API manager function"""
    import argparse
    
    parser = argparse.ArgumentParser(description="API Manager for Advanced Recon Tool")
    parser.add_argument('--setup', action='store_true', help='Interactive API key setup')
    parser.add_argument('--status', action='store_true', help='Show API key status')
    parser.add_argument('--test', action='store_true', help='Test API key validity')
    
    args = parser.parse_args()
    
    manager = APIManager()
    
    if args.setup:
        manager.interactive_setup()
    elif args.status:
        manager.show_status()
    elif args.test:
        manager.test_api_keys()
    else:
        print("üîë Advanced Recon Tool - API Manager")
        print("=" * 40)
        print("\nUsage:")
        print("  python api_manager.py --setup   # Interactive setup")
        print("  python api_manager.py --status  # Show current status")
        print("  python api_manager.py --test    # Test API keys")
        print("\nAPI keys unlock advanced features like:")
        print("- Shodan: Real IP discovery, favicon search")
        print("- VirusTotal: Enhanced subdomain discovery")
        print("- SecurityTrails: DNS history analysis")
        print("- Censys: Certificate and infrastructure analysis")

if __name__ == "__main__":
    main()